definitions:
  dto.ErrorResponseDTO:
    properties:
      message:
        type: string
    type: object
  dto.LoginRequestDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RefreshRequestDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterResponseDTO:
    properties:
      user:
        $ref: '#/definitions/entity.User'
    type: object
  dto.RegisterUserDTO:
    properties:
      age:
        maximum: 150
        minimum: 18
        type: integer
      cpf:
        type: string
      email:
        type: string
      full_name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
    required:
    - age
    - cpf
    - email
    - full_name
    - password
    type: object
  dto.TokenResponseDTO:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  entity.User:
    properties:
      age:
        type: integer
      cpf:
        type: string
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    name: Autor
    url: https://github.com/leonardonicola
  description: Boilerplate for Golang
  title: Golerplate
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/dto.TokenResponseDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
      summary: Login user
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed tokens
          schema:
            $ref: '#/definitions/dto.TokenResponseDTO'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
      summary: Refresh access token
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/dto.RegisterResponseDTO'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponseDTO'
      summary: Register a new user
      tags:
      - auth
swagger: "2.0"
